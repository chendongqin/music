<?php
/**
 * Created by PhpStorm.
 * User: Viter
 * Date: 2018/3/4
 * Time: 19:38
 */

namespace base;

use think\Cache;
use think\Controller;
use think\Db;
use ku\Tool;
use think\Exception;

class Base extends Controller
{

    //音乐类型
    protected $_musicTypes = [
        '全部', '经典老歌', '流行音乐', 'DJ', '古典音乐', '民谣', '说唱', '新歌',
    ];
    protected $_musicTypesCol = [
        '', 'is_old', 'is_popular', 'is_dj', 'is_classical', 'is_flok', 'is_rap', 'is_new',
    ];

    protected $_musicLanguages = [
        '中文', '方言', '英文', '韩语', '日语', '俄语', '其他',
    ];

    protected $_musicOrigins = [
        'CD', 'WAVE', 'AIFF', 'MPEG', 'MP3', 'MPEG-4', 'MIDI', 'WMA', 'RealAudio', 'VQF', 'AMR', 'APE', 'AAC'
    ];

    protected $_musicPicture = [
        'GIF', 'JPG', 'JPEG', 'PNG'
    ];

    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**返回json数据
     * @param string $msg
     * @param bool $status
     * @param int $code
     * @param array $data
     * @return \think\response\Json
     */
    protected function returnJson($msg = '', $code = 0, $status = false, $data = array())
    {
        $jsonData = array('status' => $status, 'msg' => $msg, 'code' => $code, 'data' => $data);
        return json($jsonData);
    }

    /**
     * 成功返回Json
     * @param array $data
     * @param string $msg
     * @param int $code
     * @return \think\response\Json
     */
    protected function successJson($data = array(), $msg = '成功', $code = 1)
    {
        $jsonData = array('status' => true, 'msg' => $msg, 'code' => $code, 'data' => $data);
        return json($jsonData);
    }

    /**
     * 失败返回Json
     * @param array $data
     * @param string $msg
     * @param int $code
     * @return \think\response\Json
     */
    protected function errorJson($msg = '失败', $code = 0, $data = [])
    {
        $jsonData = array('status' => false, 'msg' => $msg, 'code' => $code, 'data' => $data);
        return json($jsonData);
    }

    /**自动匹配请求方法获取参数
     * @param string $name
     * @param string $default
     * @param string $filter
     * @return mixed
     */
    protected function getParam($name = '', $default = '', $filter = 'string')
    {
        $request = $this->request;
        $param = $request->param($name, $default, $filter);
        return $param;
    }

    /**获取参数魔术方法
     * @param $name
     * @param $arguments
     * @return mixed
     */
    public function __call($name, $arguments)
    {
        $request = $this->request;
        $paramName = $arguments[0];
        $default = $arguments[1];
        $filter = $arguments[2];
        $param = $request->$name($paramName, $default, $filter);
        return $param;
    }

    /**生成加密密码
     * @param $password
     * @return string
     */
    protected function createPwd($password)
    {
        $sha1Code = Tool::randCode(4, false);
        $pwd = sha1($password . $sha1Code);
        return $pwd . ':' . $sha1Code;
    }

    /**密码校验
     * @param $password ,加密密码
     * @param $virefy，明文密码
     * @return bool
     */
    protected function virefyPwd($password,$virefy){
        $codes = explode(':',$password);
        $secretPassword = $codes[0];
        $sha1Code = isset($codes[1])?$codes[1]:'';
        $sha1Password = sha1($virefy.$sha1Code);
        if($secretPassword != $sha1Password){
            return false;
        }
        return true;
    }

    /**参数校验
     * @param array $rules
     * @param array $data
     * @return array|string
     */
    protected function virefyParams(array $rules, array $data)
    {
        $returnData = [];
        foreach ($rules as $key => $value) {
            if (!isset($data[$key])) {
                return (string)$value;
            }
            $returnData[$key] = $data[$key];
        }
        return $returnData;
    }

    //用户token获取
    public function userToken($userId)
    {
        //保证登陆一段时间内的token是不变的，减少重复登陆带来更多的存储消耗内存，但是过期或退出登录后改变
        if (!$code = Cache::get('userCode' . $userId)) {
            $code = Tool::randCode(8, true, true) . $userId;
            Cache::set('userCode' . $userId, $code, 1800);
        }
        $str = $code . $userId;
        $token = sha1($str);
        Cache::set('user' . $token, $userId, 86400);
        return $token;
    }

    //音乐条件查询
    public function typeToWhere($types, $where = [])
    {
        if (!is_array($types)) {
            $types = [$types];
        }
        foreach ($types as $type) {
            switch ($type) {
                case 0:
                    break;
                case 1:
                    $where['is_old'] = ['>', 30];
                    break;
                case 2:
                    $where['is_popular'] = ['>', 30];
                    break;
                case 3:
                    $where['is_dj'] = ['>', 30];
                    break;
                case 4:
                    $where['is_classical'] = ['>', 30];
                    break;
                case 5:
                    $where['is_flok'] = ['>', 30];
                    break;
                case 6:
                    $where['is_rap'] = ['>', 30];
                    break;
                case 7:
                    $where['is_new'] = 1;
                    break;
                default:
                    break;
            }
        }
        return $where;

    }


    /**获取登陆用户
     * @return array|false|null|\PDOStatement|string|\think\Model
     */
    public function getLoginUser()
    {
        $token = $this->getParam('token');
        $userId = Cache::get('user' . $token);
        if (empty($userId)) {
            return null;
        }
        try {
            $user = Db::name('user')->where('user_id', $userId)->find();
            return $user;
        } catch (Exception $e) {
            return null;
        }
    }

    //获取用户名
    public function getUserName($userId, $isEncrypt = true)
    {
        $user = Db::name('user')->where('user_id', $userId)->find();
        if (empty($user)) {
            return '';
        }
        return empty($user['nick_name']) ? substr_replace($user['mobile'], '*****', 3, -3) : $user['nick_name'];
    }

}